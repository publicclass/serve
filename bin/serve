#!/bin/bash

#
# Serve
#
# Easily create and manage a deployable repository using 
# `ssh deploy@host local/bin/serve test setup`.
#
#   Usage: serve APP <command>
#

usage () 
{
  if [ $# -ne 0 ]; then
    echo
    echo "  $@"
  fi
  cat <<-EOF

  Usage: serve APP <command>

  Commands:

    setup                set up an app
    config               manage app config vars
    domains              manage custom domains
    app                  manage app state
    logs                 display app logs
    help [command]       display help for command

EOF
}

help () 
{
  command=$1

  echo "  Usage: serve APP $command"
  echo

  case $command in
    setup)
      echo "    Sets up a repository ready for deployment for APP"
      ;;
    config)
      echo "    Display the app config vars"
      echo
      echo "  Additional commands:"
      echo
      echo "    config:add KEY1=VAL1 [KEY2=VAL2 ...]"
      echo "    config:remove KEY1 [KEY2 ...]"
      ;;
    domains)
      echo "    Display the app custom domains"
      echo
      echo "  Additional commands:"
      echo
      echo "    domains:add DOMAIN1 [DOMAIN2 ...]"
      echo "    domains:remove DOMAIN1 [DOMAIN2 ...]"
      ;;
    app)
      echo "    Display the app status"
      echo
      echo "  Additional commands:"
      echo
      echo "    app:start"
      echo "    app:restart"
      echo "    app:stop"
      ;;
    logs)
      echo "    Display the app logs"
      echo
      echo "      -f # like tail -f"
      ;;
    *)
      usage
      exit 1;
      ;;
  esac
  echo
}

require_app ()
{
  if [ -z "$APP" ]; then
    usage APP required
    exit 1;
  fi

  # set up some vars depending on APP
  DIR="$HOME/$APP"
  REPO="$DIR.git"
  ENV="$DIR/.env"
  DOMAINS="$DIR/.domains"
  CURR=`cat $DIR/.current 2> /dev/null`
  DEPLOY="$HOME/local/bin/deploy"
}

ip_address ()
{
  case $(uname) in
     Linux) 
        ifconfig \
          | grep 'inet addr:'   \
          | grep -v '127.0.0.1' \
          | cut -d: -f2 \
          | awk '{ print $1}' \
          | head -n1;;
     Darwin|FreeBSD|OpenBSD) 
        ifconfig \
          | grep -E 'inet.[0-9]' \
          | grep -v '127.0.0.1'  \
          | awk '{ print $2}' \
          | head -n1;;
     SunOS) 
        ifconfig -a \
          | grep inet \
          | grep -v '127.0.0.1' \
          | awk '{ print $2} ' \
          | head -n1;;
     *) echo "Unknown";;
  esac
}

abort ()
{
  echo
  echo " !     $@" 1>&2
  echo
  exit 1;
}

setup ()
{
  # create app
  test -d "$DIR" \
    || mkdir -p "$DIR"
  touch "$DIR/.current"

  # create repo
  test -d "$REPO" \
    || git init --bare "$REPO" > /dev/null \
    || abort "Could not initialize git repository, is git installed?"

  # install hooks
  test -L "$REPO/hooks/update" \
    || ln -s "$HOME/local/bin/update" "$REPO/hooks/update" \
    || abort "Could not install git hooks, maybe check the permissions?"

  echo "  Your app \"$APP\" has been set up! add it as a git remote with:"
  echo 
  echo "    git remote add deploy deploy@`ip_address`:$APP.git"
  echo 
}

logs ()
{
  # TODO validate the arguments (only -f is valid)
  # TODO how can we make sure this is shut down in case of ssh disconnection?
  test $CURR || abort App "$APP" is not running
  tail $@ "$DIR/$CURR.log"
}

config_list ()
{
  vars=`cat $ENV 2> /dev/null` \
    || echo "  No config vars set up for $APP" > /dev/stderr
  
  echo "  Current config vars for $APP:"
  echo "$vars" | sed "s/^/    /"
}

config_remove() 
{
  # Build an expression from arguments like: ^(A|B)=
  exp=""
  for arg in $@; do
    exp+="|${arg%=*}" # only take the key before =
  done
  exp="^(${exp#|*})=" # strips away the first |

  # Strip every line from $ENV that starts with $key
  vars=`grep -Ev "$exp" $ENV | sort | uniq`
  
  # Write to ENV
  echo "$vars" > $ENV

  app_restart
}

config_add()
{
  config_remove $@

  # Write each argument to $ENV
  for arg in $@; do
    echo "$arg" | grep -Eo "\b.+=.+\b" >> $ENV
  done

  app_restart
}


domains_list ()
{
  cat $DOMAINS 2> /dev/null \
    || echo " No domains set up for $APP" > /dev/stderr
}

domains_add ()
{
  # TODO validate domains
  domains_remove $@

  for domain in $@; do
    echo $domain >> $DOMAINS
  done
}

domains_remove ()
{
  # TODO validate domains

  # Build an expression from arguments like: ^(a\.com|b\.com)$
  exp=""
  for domain in $@; do
    exp+="|${domain//./\\.}" # escape the dots
  done
  exp="^(${exp#|*})?$" # strips away the first |

  # Strip every line from $DOMAINS that starts with $key
  domains=`grep -Ev "$exp" $DOMAINS | sort | uniq`

  # Write to $DOMAINS
  echo "$domains" > $DOMAINS
}


app_status ()
{
  app_info
  echo
  echo "  Current app status for $APP:"
  echo
  if [[ "$STATUS" != "" ]]; then
    echo "    STATUS: $STATUS"
    echo "    RELEASE: $CURR"
    echo "    PORT: $PORT"
    echo "    PID: $PID"
    echo "    UPSTART_PID: $UPSTART_PID"
  else
    echo "    STATUS: stopped"
  fi
  echo
}

app_start ()
{
  app_info
  
  # because figuring out a port is required 
  # for starting up the server we delegate this 
  # to the deploy script to DRY it up a bit.

  echo "-----> Deploying $APP ($CURR)"
  REDEPLOY=1 $DEPLOY $APP $CURR \
    || abort Failed to deploy
}

app_stop ()
{
  app_info

  # TODO a nice message instead of upstart default
  sudo stop node NAME=$APP REF=$CURR
}

app_restart ()
{
  app_info

  # TODO a nice message instead of upstart default
  sudo restart node NAME=$APP REF=$CURR PORT=$PORT

  # TODO test server after start to make sure it still works
}


app_info ()
{
  # extract PID and status (stopped/running etc) from the line below
  out=`status node NAME=$APP REF=$CURR 2> /dev/null`
  ok=$?

  STATUS=`echo "$out" | grep -Eo '(running|stopped)'` # TODO more states?
  UPSTART_PID=`echo "$out" | grep -o '[0-9]*$'`

  # no need to do the rest if it's not running
  test $ok || exit $ok

  # extract the PORTs and PIDs of the current user
  ns=`netstat -t4lpn 2> /dev/null`

  # this will result in a line-separated list of PIDs belonging to the user
  PIDS=`echo "$ns" | grep -oE '[0-9]+/' | grep -oE '[0-9]+'`

  # find one of the pids, recursively, that belongs to $UPSTART_PID
  for pid in $PIDS; do
    PID=`belongs_to_pid $UPSTART_PID $pid $pid`
    test $PID && break # found it!
  done;

  PORT=`echo "$ns" | grep "$PID/" | grep -oE ":[0-9]+" | cut -b 2-`
}

belongs_to_pid ()
{
  # stripping any leading zeroes
  ppid=${1#0*}  # the pid we're looking for (is it parent of $pid?)
  cpid=${2#0*}  # the pid we'll return if it's a match (the child we're testing)
  pid=${3#0*}   # the pid we're testing (defaults to $cpid)

  #echo "testing if $ppid < $cpid @ $pid"

  # Failed to find a parent
  if [ "$pid" == "" ]; then
    return 1
  # Found it!
  elif [ "$ppid" == "$pid" ]; then
    echo $cpid
  # Try with parent
  else
    pid=`ps -o ppid= -p $pid`
    belongs_to_pid $ppid $cpid $pid
  fi
}

reload_nginx(){
  sudo service nginx reload
}

test $DEBUG && set -x

while test $# -ne 0; do
  arg=$1; shift
  case $arg in
    help) help $1; exit ;;
    setup) require_app; setup; exit ;;
    logs) require_app; logs $@; exit ;;
    config) require_app; config_list; exit ;;
    config:add) require_app; config_add $@; config_list; exit ;;
    config:remove) require_app; config_remove $@; config_list; exit ;;
    domains) require_app; domains_list; exit ;;
    domains:add) require_app; domains_add $@; domains_list; reload_nginx; exit ;;
    domains:remove) require_app; domains_remove $@; domains_list; reload_nginx; exit ;;
    app) require_app; app_status; exit ;;
    app:start) require_app; app_start; exit ;;
    app:stop) require_app; app_stop; exit ;;
    app:restart) require_app; app_restart; exit ;;
    *) 
      if [ -z "$APP" ]; then
        APP=$arg;
      else
        usage; exit 1
      fi
      ;;
  esac
done

usage
